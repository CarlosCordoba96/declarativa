%%%EJERCICIO 9
%% Defina un predicado partir(L, L1, L2) que divida la lista L en dos
%% partes L1 y L2, tales que los elementos de L1 son menores o iguales
%% que un cierto elemento N perteneciente a L y los de L2 son mayores que
%% ese elemento N. El elemento N seleccionado no se incluye en las listas
%% partidas L1 y L2.
%%partir(L,L1,L2): verdadero si
%%caso lista vacia:
partir([],[],[]).
%%caso general:
partir([X|Xs],L1,L2):-partir(X,Xs,L1,L2).
%partir(N,L,L1,L2): definicion
%Caso base: listas vacias:
partir(_,[],[],[]).
%% Habrá dos casos, Uno en el que X sea =< que N y otro X>N
%% partir(N,[X|Xs],L1,L2):-X=<N,partir(N,Xs,Xs1,Xs2),L1=[X|Xs1],L2=Xs2.
%% Lo del final lo tenemos que poner en la cabeza de la clausula
partir(N,[X|Xs],[X|Xs1],Xs2):-X=<N,partir(N,Xs,Xs1,Xs2).
%%partir(N,[X|Xs],L1,L2):-X>Nm,partir(N,Xs,Xs1,Xs2),L1=Xs1,L2=[X|Xs2].
partir(N,[X|Xs],Xs1,[X|Xs2]):-X>N,partir(N,Xs,Xs1,Xs2).
% !
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% %Ejercicio 10. (Ordenación rápida—quicksort—)
%  El algoritmo de ordenación rápida aplica la estrategia de “divide y
% vencerás” a la tarea de ordenar una lista. La idea es particionar una
% lista con respecto a uno de sus elementos (en principio elegido al
% azar), llamado el pivote, de forma que los elementos menores o iguales
% que el pivote queden agrupados a su izquierda, en una de las listas, y
% los elementos mayores que el pivote queden agrupados a su derecha, en
% la otra lista. Observe que, tras la partición, lo único seguro es que
% el pivote está en el lugar que le corresponderá en la ordenación
% final. Entonces, el algoritmo se centra en la ordenación de las
% porciones de la lista (que no están necesariamente ordenadas), lo que
% nos remite al problema original. Utilizando el predicado partir(L, L1,
% L2) del Ejercicio 10, dé una implementación recursiva del algoritmo de
% ordenación rápida, mediante la definición de un predicado:
% quicksort(Lista, ListaOrdenada).
% !
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% quicksort(L,O): Verdadero si O es el resultado de ordenar la lista L
quicksort([],[]).
quicksort([X|Xs],O):-partir(X,Xs,Xs1,Xs2),quicksort(Xs1,O1),
                                          quicksort(Xs2,O2),
                                          append(O1,[X|O2],O).

%!  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Ejercicio 11. (Mezcla ordenada —merge_sort—)

% Implemente en Prolog el algoritmo de mezcla ordenada para la ordenación
% de una lista de elementos, mediante la definición de un predicado:
% merge_sort(Lista, ListaOrdenada). Informalmente, este algoritmo puede
% formularse como sigue: Dada una lista, divídase en dos mitades, ordene
% cada una de las mitades y, después, “mezcle” apropiadamente las dos
% listas ordenadas obtenidas en el paso anterior.
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%


%!  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Ejercicio 12.
% El polinomio Cnxn + : : : + C2x2 + C1x + C0, donde Cn; ... ;C1;C0 son
% coeficientes enteros, puede representarse en Prolog mediante el
% siguiente término:
%%cn * x ** n + ... + c2 * x ** 2 + c1 * x + c0.
% El operador “**” es un operador binario infijo. Cuando se evalúa la
% expresión “X ** n”, computa la potencia enésima de X. Observe que el
% operador “**” liga más que el operador binario infijo “*”, que a su vez
% liga más que el operador binario infijo “+” (por lo tanto no se
% requiere el uso de paréntesis). Observe también que, en la
% representación anterior, la variable x se trata como una constante.
% Defina un predicado eval(P, V, R) que devuelva el resultado R de
% evaluar un polinomio P para un cierto valor V de la variable x. A modo
% de ejemplo, el objetivo ?- eval(5 * x ** 2 + 1, 4, R). debe tener éxito
% con respuesta R = 81.
%
%sustitutir(P,V,E):Sustituye en P por el valor V y da una expresion E
%
eval(P,V,R):-sustituir(P,V,E),R is E.
%Casos monomio:entero, x, entero*x,x**entero,entero*x**entero
sustituir(E,V,E):-integer(E).
sustituir(x,V,V).
sustituir(C,V,C):-integer(C).
sustituir(C*x,V,C*V):-integer(C).

%Casos polinomio monomio, monomio+ polinomio,monomio- polinomio
